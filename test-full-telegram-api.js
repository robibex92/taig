import fetch from "node-fetch";
import crypto from 'crypto';

// –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const mockTelegramData = {
  id: 123456789,
  first_name: 'Test',
  last_name: 'User',
  username: 'testuser',
  photo_url: 'https://example.com/photo.jpg',
  auth_date: Math.floor(Date.now() / 1000),
  hash: ''
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞
function generateTelegramHash(data, botToken) {
  const secret = crypto
    .createHash("sha256")
    .update(botToken)
    .digest();

  const checkString = Object.keys(data)
    .sort()
    .map((key) => `${key}=${data[key]}`)
    .join("\n");

  const hmac = crypto
    .createHmac("sha256", secret)
    .update(checkString)
    .digest("hex");

  return hmac;
}

async function testTelegramAPI() {
  try {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ API Telegram...\n");

    // 1. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
    console.log("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram...");
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–µ—à (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω)
    const testBotToken = "1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    const { hash, ...dataForHash } = mockTelegramData;
    mockTelegramData.hash = generateTelegramHash(dataForHash, testBotToken);

    const authResponse = await fetch("http://localhost:4000/api/auth/telegram", {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(mockTelegramData),
    });

    console.log("Auth Status:", authResponse.status);
    
    if (authResponse.ok) {
      const authData = await authResponse.json();
      console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
      
      if (authData.success && authData.data?.accessToken) {
        const accessToken = authData.data.accessToken;
        
        // 2. –¢–µ—Å—Ç API Telegram —á–∞—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º
        console.log("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Telegram —á–∞—Ç–æ–≤...");
        
        const chatsResponse = await fetch("http://localhost:4000/api/telegram-chats", {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        });

        console.log("Chats Status:", chatsResponse.status);
        console.log("Chats Headers:", Object.fromEntries(chatsResponse.headers.entries()));

        if (chatsResponse.ok) {
          const chatsData = await chatsResponse.json();
          console.log("‚úÖ API —á–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
          console.log("–î–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤:", JSON.stringify(chatsData, null, 2));
        } else {
          const error = await chatsResponse.text();
          console.log("‚ùå –û—à–∏–±–∫–∞ API —á–∞—Ç–æ–≤:", error);
        }

        // 3. –¢–µ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        console.log("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...");
        
        const filteredResponse = await fetch("http://localhost:4000/api/telegram-chats?purpose=ads&active_only=true", {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        });

        console.log("Filtered Status:", filteredResponse.status);
        
        if (filteredResponse.ok) {
          const filteredData = await filteredResponse.json();
          console.log("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!");
          console.log("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", JSON.stringify(filteredData, null, 2));
        } else {
          const error = await filteredResponse.text();
          console.log("‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", error);
        }

      } else {
        console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      }
    } else {
      const error = await authResponse.text();
      console.log("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);
  }
}

testTelegramAPI();
