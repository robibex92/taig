import { supabase } from '../db.js';
import bot from '../bot.js';

const escapeHTML = (text) => {
  if (!text) return '';
  return text.toString()
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;')
    .trim();
};

function generateAnnouncementUrl(announcementId) {
  return `https://tp.sibroot.ru/#/announcement/${announcementId}`;
}

const separator = 'üîπüîπüîπüîπüîπüîπüîπüîπüîπüîπ';

export const generateAnnouncementText = async (announcement) => {
  const { data: userData } = await supabase
    .from('users')
    .select('username')
    .eq('user_id', announcement.user_id)
    .single();

  const authorText = userData?.username
    ? `üë§ <b>–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>: @${userData.username}`
    : `üë§ <b>–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>: <a href="tg://user?id=${announcement.user_id}">ID</a>`;

  const title = escapeHTML(announcement.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
  const content = escapeHTML(announcement.content || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  const price = announcement.price ? `üí∞ <b>–¶–µ–Ω–∞</b>: ${escapeHTML(announcement.price.toString())} ‚ÇΩ` : '';

  return `
üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b> üì¢ 
${title}
${separator}

${content}

${price}

${authorText}
üîó <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ</b>: <a href="${generateAnnouncementUrl(announcement.id)}">–ó–¥–µ—Å—å</a>`
    .trim();
};

export const updateAnnouncementInTelegram = async (data) => {
  const announcement = data.announcement || data.announcementData || data;
  const announcementId = announcement.id || data.announcementId || data.id;

  if (!announcement || !announcementId) {
    console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', { data, announcement, announcementId });
    return { success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' };
  }

  try {
    const { data: telegramMessages, error: fetchError } = await supabase
      .from('telegram_messages')
      .select('*')
      .eq('ad_id', announcementId);

    if (fetchError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î:', fetchError);
      return { success: false, message: fetchError.message };
    }

    if (!telegramMessages || telegramMessages.length === 0) {
      console.warn(`–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID: ${announcementId}`);
      return { success: false, message: '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram' };
    }

    const messageText = await generateAnnouncementText(announcement);
    const imageUrls = announcement.images || 
                     announcement.ad_images?.map(img => img.image_url) || 
                     data.imageUrls || 
                     [];

    const updatePromises = telegramMessages.map(async (message) => {
      try {
        if (message.media_group_id) {
          // –û–±–Ω–æ–≤–ª—è–µ–º caption –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
          await bot.telegram.editMessageCaption(
            message.chat_id,
            message.message_id,
            undefined,
            messageText,
            { parse_mode: 'HTML' }
          );
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          await bot.telegram.editMessageText(
            message.chat_id,
            message.message_id,
            undefined,
            messageText,
            { parse_mode: 'HTML' }
          );
        }
        return true;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.message_id}:`, error);
        return false;
      }
    });

    const results = await Promise.all(updatePromises);
    const allUpdated = results.every(result => result);

    return { 
      success: allUpdated,
      message: allUpdated ? '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã' : '–ù–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
    return { success: false, message: error.message };
  }
}; 