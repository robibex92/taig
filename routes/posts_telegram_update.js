import { pool } from "../config/db.js";
import { TelegramCreationService } from "./telegram.js";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
function escapeHtml(text) {
  if (!text) return "";
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è –ø–æ—Å—Ç–∞ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º/–º–µ–¥–∏–∞
 * @param {Object} post - –æ–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞ { id, title, content }
 * @param {string[]} [imageUrls] - –º–∞—Å—Å–∏–≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É/—Å–æ–æ–±—â–µ–Ω–∏—é
 */
export async function updateTelegramMessagesForPost(post, imageUrls = []) {
  // 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ telegram_messages, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ chat_id –∏ thread_id
  const { rows: messageGroups } = await pool.query(
    `SELECT chat_id, thread_id, array_agg(message_id ORDER BY message_id) as message_ids FROM telegram_messages WHERE post_id = $1 GROUP BY chat_id, thread_id`,
    [post.id]
  );

  if (!messageGroups.length) {
    console.log("No telegram messages found for post:", post.id);
    return [];
  }

  // 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
  const newText = `üö® ${escapeHtml(
    post.title
  )} üö®\nüî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏\n${escapeHtml(post.content)}`;

  const results = [];

  for (const group of messageGroups) {
    const { chat_id, thread_id, message_ids } = group;
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ message_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏
    const main_message_id = message_ids[0];

    try {
      if (imageUrls && imageUrls.length > 0) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É (–∏–ª–∏ —Ñ–æ—Ç–æ)

        // 3a. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ (—á–∞—Ç+–ø–æ—Ç–æ–∫)
        for (const msg_id of message_ids) {
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API, —Ç–∞–∫ –∫–∞–∫ telegram.js –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤
            const deleteUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/deleteMessage`;
            await fetch(deleteUrl, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ chat_id: chat_id, message_id: msg_id }),
            });
          } catch (deleteError) {
            console.error(
              `Failed to delete message ${msg_id} in chat ${chat_id}:`,
              deleteError.message
            );
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å
          }
        }

        // 3b. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ (–∏–ª–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É)
        // TelegramCreationService –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ { media: url }
        const photosToSend = imageUrls.map((url) => ({
          type: "photo",
          media: url,
        }));

        const sendResult = await TelegramCreationService.sendMessage({
          message: newText, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–µ–¥–∏–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          chatIds: [chat_id],
          threadIds: thread_id ? [thread_id] : [],
          photos: photosToSend.length > 0 ? photosToSend : undefined, // –ü–µ—Ä–µ–¥–∞–µ–º photos —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        });

        // 3c. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ë–î –Ω–æ–≤—ã–º–∏ message_id
        // –¢–∞–∫ –∫–∞–∫ –º—ã —É–¥–∞–ª–∏–ª–∏ —Å—Ç–∞—Ä—ã–µ, –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏—Ö –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
        await pool.query(
          `DELETE FROM telegram_messages WHERE post_id = $1 AND chat_id = $2 AND (thread_id IS NULL OR thread_id = $3)`,
          [post.id, chat_id, thread_id]
        );

        if (sendResult && Array.isArray(sendResult.results)) {
          for (const resItem of sendResult.results) {
            if (resItem.result && Array.isArray(resItem.result)) {
              // –î–ª—è sendMediaGroup
              for (const message of resItem.result) {
                if (message && message.message_id) {
                  await pool.query(
                    `INSERT INTO telegram_messages (post_id, chat_id, thread_id, message_id, media_group_id, created_at) VALUES ($1, $2, $3, $4, $5, NOW())`,
                    [
                      post.id,
                      resItem.chatId,
                      resItem.threadId,
                      message.message_id,
                      message.media_group_id,
                    ]
                  );
                }
              }
            } else if (resItem.result?.message_id) {
              // –î–ª—è sendPhoto (–æ–¥–Ω–æ —Ñ–æ—Ç–æ)
              await pool.query(
                `INSERT INTO telegram_messages (post_id, chat_id, thread_id, message_id, created_at) VALUES ($1, $2, $3, $4, NOW())`,
                [
                  post.id,
                  resItem.chatId,
                  resItem.threadId,
                  resItem.result.message_id,
                ]
              );
            }
          }
        }
        results.push({ chat_id, thread_id, updated: true, sendResult });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ.
        // –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç—Ä–∞–Ω–Ω–æ.
        // –ü—Ä–æ—Å—Ç–æ–π editMessageText —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

        // –í –ø—Ä–æ—Å—Ç–µ–π—à–µ–º —Å–ª—É—á–∞–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        const editRes = await fetch(
          `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/editMessageText`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: chat_id,
              message_id: main_message_id,
              text: newText,
              parse_mode: "HTML",
            }),
          }
        );
        const editJson = await editRes.json();
        if (!editJson.ok) {
          console.error(
            `Failed to edit text message ${main_message_id} in chat ${chat_id}:`,
            editJson.description
          );
          results.push({
            chat_id,
            thread_id,
            message_id: main_message_id,
            edited: false,
            error: editJson.description,
          });
        } else {
          results.push({
            chat_id,
            thread_id,
            message_id: main_message_id,
            edited: true,
          });
        }
      }
    } catch (err) {
      console.error(
        `Error processing telegram messages for chat ${chat_id} (post ${post.id}):`,
        err
      );
      results.push({ chat_id, thread_id, error: err.message });
    }
  }

  return results;
}
