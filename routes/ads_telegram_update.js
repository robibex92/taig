import express from "express";
import { pool } from "../config/db.js";
import { TelegramCreationService } from "./telegram.js";
import { authenticateJWT } from "../middlewares/authMiddleware.js";
import pLimit from "p-limit";

const router = express.Router();

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º/–º–µ–¥–∏–∞
 * @param {Object} ad - –æ–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è { id, title, content, image_url }
 * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
 */
// --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML ---
function escapeHtml(text) {
  if (!text) return "";
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è URL
function isValidUrl(url) {
  try {
    new URL(url);
    return true;
  } catch {
    return false;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î
async function updateAd(ad_id, updateFields) {
  if (Object.keys(updateFields).length === 0) {
    return null; // –ù–∏—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
  }

  const params = [];
  let queryParts = [];
  let paramIndex = 1;

  const allowedFields = [
    "title",
    "content",
    "category",
    "subcategory",
    "price",
    "status",
  ];

  for (const field in updateFields) {
    if (allowedFields.includes(field)) {
      queryParts.push(`${field} = $${paramIndex}`);
      params.push(updateFields[field]);
      paramIndex++;
    }
  }

  if (queryParts.length === 0) {
    return null; // –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  }

  queryParts.push(`updated_at = NOW()`);

  const query = `UPDATE ads SET ${queryParts.join(
    ", "
  )} WHERE id = $${paramIndex} RETURNING *`;
  params.push(ad_id);

  const { rows } = await pool.query(query, params);
  return rows[0];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function updateImages(ad_id, images) {
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  await pool.query(`DELETE FROM ad_images WHERE ad_id = $1`, [ad_id]);

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
  if (Array.isArray(images) && images.length > 0) {
    for (const img of images) {
      if (!isValidUrl(img.url || img.image_url)) {
        console.error("Invalid image URL:", img.url || img.image_url);
        continue;
      }
      await pool.query(
        `INSERT INTO ad_images (ad_id, image_url, is_main, created_at)
         VALUES ($1, $2, $3, NOW())`,
        [ad_id, img.url || img.image_url, !!img.is_main]
      );
    }
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function updateTelegramMessages(ad_id, ad, messages) {
  if (!messages.length) {
    console.log("No messages found for ad:", ad_id);
    return [];
  }

  const siteUrl = process.env.PUBLIC_SITE_URL || "https://test.sibroot.ru";
  const adLink = `${siteUrl}/ads/${ad_id}`;
  const priceStr =
    ad.price == null ? "üí∞ –¶–µ–Ω–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞" : `üí∞ –¶–µ–Ω–∞: ${ad.price} ‚ÇΩ`;

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  let username = ad.username;
  if (!username && ad.user_id) {
    const userRes = await pool.query(
      "SELECT username FROM users WHERE user_id = $1",
      [ad.user_id]
    );
    if (userRes.rows.length > 0) {
      username = userRes.rows[0].username;
    }
  }

  const authorLink = username
    ? `<a href="https://t.me/${username}">${escapeHtml(username)}</a>`
    : ad.user_id || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

  const newText =
    `üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)</b>: ${escapeHtml(ad.title)} üì¢\n\n` +
    `${escapeHtml(ad.content)}\n\n` +
    `${priceStr}\n\n` +
    `üë§ –ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${authorLink}\n\n` +
    `üîó <a href="${adLink}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ</a>`;

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const { rows: images } = await pool.query(
    "SELECT image_url FROM ad_images WHERE ad_id = $1 ORDER BY is_main DESC, created_at ASC",
    [ad_id]
  );

  const photos = images
    .map((img) => {
      let url = img.image_url;
      if (url.startsWith("/")) {
        const baseUrl =
          process.env.PUBLIC_SITE_URL || "https://api.asicredinvest.md/api-v1";
        url = `${baseUrl}${url}`;
      }
      return isValidUrl(url) ? url : null;
    })
    .filter(Boolean);

  console.log("Prepared photos:", photos);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const limit = pLimit(5);
  const results = [];

  await Promise.all(
    messages.map((msg) =>
      limit(async () => {
        try {
          // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const editResult = await fetch(
            `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/editMessageText`,
            {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                chat_id: msg.chat_id,
                message_id: msg.message_id,
                text: newText,
                parse_mode: "HTML",
                disable_web_page_preview: false,
              }),
            }
          );

          const editData = await editResult.json();

          if (!editData.ok) {
            console.error(`Failed to edit message in Telegram:`, {
              chat_id: msg.chat_id,
              message_id: msg.message_id,
              error: editData.description,
            });
            results.push({ chat_id: msg.chat_id, error: editData.description });
            return;
          }

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
          if (photos.length > 0) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è
            const { rows: mediaMessages } = await pool.query(
              `SELECT message_id FROM telegram_messages 
               WHERE ad_id = $1 AND chat_id = $2 AND media_group_id IS NOT NULL`,
              [ad_id, msg.chat_id]
            );

            for (const mediaMsg of mediaMessages) {
              await fetch(
                `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/deleteMessage`,
                {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    chat_id: msg.chat_id,
                    message_id: mediaMsg.message_id,
                  }),
                }
              );
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const sendResult = await TelegramCreationService.sendMessage({
              message: newText,
              chatIds: [msg.chat_id],
              threadIds: msg.thread_id ? [msg.thread_id] : [],
              photos: photos,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            if (sendResult && Array.isArray(sendResult.results)) {
              for (const res of sendResult.results) {
                if (res.result && Array.isArray(res.result)) {
                  // –î–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                  for (const message of res.result) {
                    if (message && message.message_id) {
                      await pool.query(
                        `UPDATE telegram_messages 
                         SET message_id = $1, media_group_id = $2 
                         WHERE ad_id = $3 AND chat_id = $4`,
                        [
                          message.message_id,
                          message.media_group_id,
                          ad_id,
                          res.chatId,
                        ]
                      );
                    }
                  }
                }
              }
            }
          }

          results.push({ chat_id: msg.chat_id, updated: true });
        } catch (err) {
          console.error(`Error updating message for chat ${msg.chat_id}:`, err);
          results.push({ chat_id: msg.chat_id, error: err.message });
        }
      })
    )
  );

  return results;
}

// –†–æ—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
router.put("/ads-telegram/:id", authenticateJWT, async (req, res) => {
  const client = await pool.connect();
  try {
    await client.query("BEGIN");

    const ad_id = parseInt(req.params.id);
    if (isNaN(ad_id)) {
      return res.status(400).json({ error: "Invalid ad ID" });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const updateFields = {};
    const allowedFields = [
      "title",
      "content",
      "category",
      "subcategory",
      "price",
      "status",
      "images", // images will be handled separately by updateImages
    ];

    for (const field in req.body) {
      if (allowedFields.includes(field) && field !== "images") {
        updateFields[field] = req.body[field];
      }
    }

    const images = req.body.images; // –û—Ç–¥–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const {
      rows: [ad],
    } = await client.query("SELECT * FROM ads WHERE id = $1", [ad_id]);

    if (!ad) {
      return res.status(404).json({ error: "Ad not found" });
    }

    const user_id = req.user?.id || req.user?.user_id;
    if (!user_id || String(ad.user_id) !== String(user_id)) {
      return res.status(403).json({ error: "Access denied" });
    }

    let updatedAd = ad; // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (Object.keys(updateFields).length > 0) {
      const result = await updateAd(ad_id, updateFields);
      if (result) updatedAd = result; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
    if (images !== undefined) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø–æ–ª–µ images –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
      await updateImages(ad_id, images);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    const {
      rows: [finalAdData],
    } = await client.query("SELECT * FROM ads WHERE id = $1", [ad_id]);
    const { rows: finalImages } = await client.query(
      "SELECT * FROM ad_images WHERE ad_id = $1 ORDER BY is_main DESC, created_at ASC",
      [ad_id]
    );
    finalAdData.images = finalImages; // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –æ–±—ä–µ–∫—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É–∂–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î)
    const { rows: messages } = await client.query(
      `SELECT chat_id, thread_id, message_id FROM telegram_messages WHERE ad_id = $1`,
      [ad_id]
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å)
    let telegramResults = [];
    if (messages.length > 0) {
      telegramResults = await updateTelegramMessages(
        ad_id,
        finalAdData, // –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        messages
      );
    }

    await client.query("COMMIT");
    res.json({
      message: "Updated",
      ad: finalAdData, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      telegram: telegramResults,
    });
  } catch (error) {
    await client.query("ROLLBACK");
    console.error(`[${new Date().toISOString()}] Error updating ad:`, error);
    res.status(500).json({ error: error.message });
  } finally {
    client.release();
  }
});

export default router;
