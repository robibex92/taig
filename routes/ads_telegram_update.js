import { pool } from "../config/db.js";
import { TelegramCreationService } from "./telegram.js";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º/–º–µ–¥–∏–∞
 * @param {Object} ad - –æ–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è { id, title, content, image_url }
 * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
 */
// --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML ---
function escapeHtml(text) {
  if (!text) return "";
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

export async function updateTelegramMessagesForAd(ad) {
  // 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ telegram_messages
  const { rows: messages } = await pool.query(
    `SELECT chat_id, thread_id, message_id FROM telegram_messages WHERE ad_id = $1`,
    [ad.id]
  );
  if (!messages.length) return [];

  // 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
  // –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const siteUrl = process.env.PUBLIC_SITE_URL || "https://test.sibroot.ru";
  const adLink = `${siteUrl}/ads/${ad.id}`;
  const priceStr =
    ad.price == null ? "üí∞ –¶–µ–Ω–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞" : `üí∞ –¶–µ–Ω–∞: ${ad.price} ‚ÇΩ`;

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  let username = ad.username;
  let authorLink = "";

  // –ï—Å–ª–∏ username –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ ad, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
  if (!username && ad.user_id) {
    const userRes = await pool.query(
      "SELECT username FROM users WHERE user_id = $1",
      [ad.user_id]
    );
    if (userRes.rows.length > 0) {
      username = userRes.rows[0].username;
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞
  if (username) {
    authorLink = `<a href="https://t.me/${username}">${escapeHtml(
      username
    )}</a>`;
  } else if (ad.user_id) {
    authorLink = ad.user_id;
  } else {
    authorLink = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  }

  const newText =
    `üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)</b>: ${escapeHtml(ad.title)} üì¢\n\n` +
    `${escapeHtml(ad.content)}\n\n` +
    `${priceStr}\n\n` +
    `üë§ –ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${authorLink}\n\n` +
    `üîó <a href="${adLink}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ</a>`;

  // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
  const results = [];
  for (const msg of messages) {
    try {
      if (ad.image_url) {
        // 3a. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await fetch(
          `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/deleteMessage`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: msg.chat_id,
              message_id: msg.message_id,
            }),
          }
        );
        // 3b. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
        // –§–æ—Ä–º–∏—Ä—É–µ–º photos –∫–∞–∫ –º–∞—Å—Å–∏–≤ URL-–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        let photos = [];
        if (ad.image_url) {
          // –ï—Å–ª–∏ image_url —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (URL), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –Ω–∞–ø—Ä—è–º—É—é
          if (typeof ad.image_url === "string") {
            photos = [ad.image_url];
          } else {
            // –ï—Å–ª–∏ image_url —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –±–µ—Ä–µ–º url –∏–ª–∏ image_url
            photos = [ad.image_url.url || ad.image_url.image_url].filter(
              Boolean
            );
          }
        }

        const sendResult = await TelegramCreationService.sendMessage({
          message: newText,
          chatIds: [msg.chat_id],
          threadIds: msg.thread_id ? [msg.thread_id] : [],
          photos,
        });
        // 3c. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î
        const newMsgId =
          Array.isArray(sendResult?.results) &&
          sendResult.results[0]?.result?.message_id
            ? sendResult.results[0].result.message_id
            : null;
        if (newMsgId) {
          await pool.query(
            `UPDATE telegram_messages SET message_id = $1 WHERE ad_id = $2 AND chat_id = $3`,
            [newMsgId, ad.id, msg.chat_id]
          );
        }
        results.push({ chat_id: msg.chat_id, updated: true, newMsgId });
      } else {
        // 4. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        const editRes = await fetch(
          `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/editMessageText`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: msg.chat_id,
              message_id: msg.message_id,
              text: newText,
              parse_mode: "HTML",
            }),
          }
        );
        const editJson = await editRes.json();
        results.push({ chat_id: msg.chat_id, edited: editJson.ok });
      }
    } catch (err) {
      results.push({ chat_id: msg.chat_id, error: err.message });
    }
  }
  return results;
}
