import express from "express";
import { pool } from "../config/db.js";
import { getTelegramChatTargets } from "../utils/telegramChatTargets.js";
import { TelegramCreationService } from "./telegram.js";
import { authenticateJWT } from "../middlewares/authMiddleware.js";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const routerAdsTelegram = express.Router();

// --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML ---
function escapeHtml(text) {
  if (!text) return "";
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
routerAdsTelegram.post(
  "/api/ads-telegram",
  authenticateJWT,
  async (req, res) => {
    try {
      const {
        user_id: user_id_from_body,
        title,
        content,
        category,
        subcategory,
        price = null,
        status = "active",
        selectedChats = [],
        images = [], // [{url: ...}, ...]
        isImportant = false,
      } = req.body;

      const user_id = req.user?.id || req.user?.user_id;
      if (!user_id) {
        return res.status(401).json({ error: "No user_id in token" });
      }
      if (user_id_from_body && String(user_id_from_body) !== String(user_id)) {
        return res.status(403).json({ error: "User ID mismatch" });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!user_id || !title || !content || !category || !subcategory) {
        return res.status(400).json({ error: "Missing required fields" });
      }

      // 1. –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ id
      const { rows } = await pool.query(
        `INSERT INTO ads \
       (user_id, title, content, category, subcategory, price, status, created_at)\
       VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())\
       RETURNING *`,
        [user_id, title, content, category, subcategory, price, status]
      );
      const ad = rows[0];
      const ad_id = ad.id;

      // --- –í–°–¢–ê–í–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ---
      if (Array.isArray(images) && images.length > 0) {
        for (let i = 0; i < images.length; ++i) {
          const img = images[i];
          await pool.query(
            `INSERT INTO ad_images (ad_id, image_url, is_main, created_at)
           VALUES ($1, $2, $3, NOW())`,
            [ad_id, img.url || img.image_url, !!img.is_main]
          );
        }
      }

      // 2. –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –∏ –≤—ã–±—Ä–∞–Ω—ã —á–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
      let telegramResults = [];
      if (
        isImportant &&
        Array.isArray(selectedChats) &&
        selectedChats.length > 0 &&
        ad_id
      ) {
        const chatTargets = getTelegramChatTargets(selectedChats);
        // –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const siteUrl =
          process.env.PUBLIC_SITE_URL || "https://test.sibroot.ru";
        const adLink = `${siteUrl}/ads/${ad_id}`;
        const priceStr =
          price == null ? "üí∞ –¶–µ–Ω–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞" : `üí∞ –¶–µ–Ω–∞: ${price} ‚ÇΩ`;

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        let username = req.user?.username;
        let authorLink = "";

        // –ï—Å–ª–∏ username –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ req.user, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
        if (!username && user_id) {
          const userRes = await pool.query(
            "SELECT username FROM users WHERE user_id = $1",
            [user_id]
          );
          if (userRes.rows.length > 0) {
            username = userRes.rows[0].username;
          }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞
        if (username) {
          authorLink = `<a href="https://t.me/${username}">${escapeHtml(
            username
          )}</a>`;
        } else if (user_id) {
          authorLink = user_id;
        } else {
          authorLink = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        }

        const messageText =
          `üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ</b>: ${escapeHtml(title)} üì¢\n\n` +
          `${escapeHtml(content)}\n\n` +
          `${priceStr}\n\n` +
          `üë§ –ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${authorLink}\n\n` +
          `üîó <a href="${adLink}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ</a>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º photosToSend –∫–∞–∫ –º–∞—Å—Å–∏–≤ URL-–æ–≤
        const photosToSend =
          Array.isArray(images) && images.length > 0
            ? images
                .map((img, index) => {
                  let url =
                    typeof img === "string" ? img : img.url || img.image_url;

                  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                  if (typeof url !== "string") {
                    console.error("Invalid URL type:", typeof url, url);
                    return null;
                  }

                  // –ï—Å–ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–∏–º –¥–æ–º–µ–Ω
                  if (url.startsWith("/")) {
                    const baseUrl =
                      process.env.PUBLIC_SITE_URL ||
                      "https://api.asicredinvest.md/api-v1";
                    url = `${baseUrl}${url}`;
                  }

                  console.log("Processing image URL:", url);
                  return url;
                })
                .filter(Boolean)
            : [];

        console.log(
          "Final photosToSend:",
          JSON.stringify(photosToSend, null, 2)
        );

        telegramResults = await Promise.all(
          chatTargets.map(async (target) => {
            try {
              console.log("Sending to chat:", target.chatId);
              let result;
              if (photosToSend.length > 0) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                const mediaGroupId = Date.now().toString();

                // –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const mediaGroup = photosToSend.map((photo, index) => ({
                  type: "photo",
                  media: photo,
                  ...(index === 0
                    ? {
                        caption: messageText,
                        parse_mode: "HTML",
                        media_group_id: mediaGroupId,
                      }
                    : {}),
                }));

                console.log(
                  "Sending media group:",
                  JSON.stringify(mediaGroup, null, 2)
                );

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                await new Promise((resolve) => setTimeout(resolve, 1500));

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                result = await TelegramCreationService.sendMessage({
                  message: messageText,
                  chatIds: [target.chatId],
                  threadIds: target.threadId ? [target.threadId] : [],
                  photos: photosToSend,
                  mediaGroupId: mediaGroupId,
                });

                console.log(
                  "Media group send result:",
                  JSON.stringify(result, null, 2)
                );

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if (result && Array.isArray(result.results)) {
                  for (const res of result.results) {
                    console.log(
                      "Processing result item:",
                      JSON.stringify(res, null, 2)
                    );
                    if (res.result && Array.isArray(res.result)) {
                      // –î–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                      for (const message of res.result) {
                        if (message && message.message_id) {
                          console.log("Saving message to database:", {
                            ad_id,
                            chatId: res.chatId,
                            threadId: res.threadId,
                            messageId: message.message_id,
                            mediaGroupId: message.media_group_id,
                          });
                          await pool.query(
                            `INSERT INTO telegram_messages (ad_id, chat_id, thread_id, message_id, media_group_id, created_at) VALUES ($1, $2, $3, $4, $5, NOW())`,
                            [
                              ad_id,
                              res.chatId,
                              res.threadId,
                              message.message_id,
                              message.media_group_id,
                            ]
                          );
                        }
                      }
                    } else if (res.result?.result?.message_id) {
                      // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                      console.log("Saving message to database:", {
                        ad_id,
                        chatId: res.chatId,
                        threadId: res.threadId,
                        messageId: res.result.result.message_id,
                      });
                      await pool.query(
                        `INSERT INTO telegram_messages (ad_id, chat_id, thread_id, message_id, created_at) VALUES ($1, $2, $3, $4, NOW())`,
                        [
                          ad_id,
                          res.chatId,
                          res.threadId,
                          res.result.result.message_id,
                        ]
                      );
                    } else {
                      console.log("No message_id in result:", res);
                    }
                  }
                }
              } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                console.log("Sending text-only message:", messageText);
                result = await TelegramCreationService.sendMessage({
                  message: messageText,
                  chatIds: [target.chatId],
                  threadIds: target.threadId ? [target.threadId] : [],
                });
                console.log(
                  "Text-only send result:",
                  JSON.stringify(result, null, 2)
                );
              }
              return { chat: target, ok: true };
            } catch (err) {
              console.error("Error sending to Telegram:", err);
              return { chat: target, ok: false, error: err.message };
            }
          })
        );
      }

      res.status(201).json({ message: "Created" });
    } catch (error) {
      console.error(
        `[${new Date().toISOString()}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å Telegram:`,
        error
      );
      res.sendStatus(500);
    }
  }
);

export default routerAdsTelegram;
