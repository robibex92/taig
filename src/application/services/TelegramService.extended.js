/**
 * Extended methods for TelegramService
 * Add these methods to the existing TelegramService.js
 */

/**
 * Notify seller about new booking
 * @param {number} sellerId - User ID of the seller
 * @param {Object} booking - Booking object
 * @param {number} queuePosition - Position in queue
 */
async notifySellerAboutBooking(sellerId, booking, queuePosition) {
  try {
    // Get seller's telegram ID
    const seller = await this._getUserById(sellerId);
    if (!seller || !seller.id_telegram) {
      logger.warn('Seller has no Telegram ID', { sellerId });
      return;
    }

    const message = this._buildBookingNotificationMessage(booking, queuePosition);

    await bot.sendMessage(seller.id_telegram, message, {
      parse_mode: 'HTML',
    });

    logger.info('Seller notified about booking', {
      sellerId,
      bookingId: booking.id,
    });
  } catch (error) {
    logger.error('Failed to notify seller about booking', {
      sellerId,
      bookingId: booking.id,
      error: error.message,
    });
    throw error;
  }
}

/**
 * Notify buyer about booking status change
 * @param {number} buyerId - User ID of the buyer
 * @param {Object} booking - Booking object
 * @param {string} status - New status
 */
async notifyBuyerAboutStatus(buyerId, booking, status) {
  try {
    // Get buyer's telegram ID
    const buyer = await this._getUserById(buyerId);
    if (!buyer || !buyer.id_telegram) {
      logger.warn('Buyer has no Telegram ID', { buyerId });
      return;
    }

    const message = this._buildBookingStatusMessage(booking, status);

    await bot.sendMessage(buyer.id_telegram, message, {
      parse_mode: 'HTML',
    });

    logger.info('Buyer notified about booking status', {
      buyerId,
      bookingId: booking.id,
      status,
    });
  } catch (error) {
    logger.error('Failed to notify buyer about booking status', {
      buyerId,
      bookingId: booking.id,
      status,
      error: error.message,
    });
    throw error;
  }
}

/**
 * Update ad in Telegram (add status label)
 * @param {number} adId - Ad ID
 * @param {Array} messageIds - Array of {chatId, messageId}
 * @param {string} status - New status (archived, sold)
 */
async updateAdInTelegram(adId, messageIds, status) {
  try {
    const statusLabel = status === 'sold' ? '[–ü–†–û–î–ê–ù–û]' : '[–ê–†–•–ò–í]';
    
    for (const { chatId, messageId } of messageIds) {
      await this.limit(async () => {
        try {
          // Get current message
          const message = await bot.getMessage(chatId, messageId);
          
          // Add status label to caption or text
          let newText = message.caption || message.text || '';
          if (!newText.includes(statusLabel)) {
            newText = `${statusLabel}\n\n${newText}`;
          }

          // Edit message
          if (message.caption) {
            await bot.editMessageCaption(newText, {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: 'HTML',
            });
          } else {
            await bot.editMessageText(newText, {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: 'HTML',
            });
          }

          await this._delay();
        } catch (error) {
          logger.error('Failed to update message in Telegram', {
            chatId,
            messageId,
            error: error.message,
          });
        }
      });
    }

    logger.info('Ad updated in Telegram', { adId, status });
  } catch (error) {
    logger.error('Failed to update ad in Telegram', {
      adId,
      status,
      error: error.message,
    });
    throw error;
  }
}

/**
 * Notify owner about ad archival
 * @param {number} ownerId - User ID of the ad owner
 * @param {Object} ad - Ad object
 * @param {Object} stats - Ad statistics
 */
async notifyOwnerAboutArchival(ownerId, ad, stats) {
  try {
    const owner = await this._getUserById(ownerId);
    if (!owner || !owner.id_telegram) {
      logger.warn('Owner has no Telegram ID', { ownerId });
      return;
    }

    const message = this._buildArchivalNotificationMessage(ad, stats);

    await bot.sendMessage(owner.id_telegram, message, {
      parse_mode: 'HTML',
    });

    logger.info('Owner notified about archival', { ownerId, adId: ad.id });
  } catch (error) {
    logger.error('Failed to notify owner about archival', {
      ownerId,
      adId: ad.id,
      error: error.message,
    });
  }
}

/**
 * Build booking notification message for seller
 * @private
 */
_buildBookingNotificationMessage(booking, queuePosition) {
  const buyer = booking.user;
  const ad = booking.ad;

  return `
üîî <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!</b>

üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b> ${ad.title}
üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> ${buyer.first_name} ${buyer.last_name || ''}${buyer.username ? ` (@${buyer.username})` : ''}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${booking.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìä <b>–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:</b> ${queuePosition}

–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ.
  `.trim();
}

/**
 * Build booking status message for buyer
 * @private
 */
_buildBookingStatusMessage(booking, status) {
  const statusEmoji = status === 'confirmed' ? '‚úÖ' : '‚ùå';
  const statusText = status === 'confirmed' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
  const ad = booking.ad;
  const seller = ad.user;

  let message = `
${statusEmoji} <b>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${statusText}!</b>

üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b> ${ad.title}
üí∞ <b>–¶–µ–Ω–∞:</b> ${ad.price ? `${ad.price} ‚ÇΩ` : '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}
üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> ${seller.first_name} ${seller.last_name || ''}${seller.username ? ` (@${seller.username})` : ''}
  `.trim();

  if (status === 'confirmed' && booking.seller_note) {
    message += `\n\nüìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b>\n${booking.seller_note}`;
  }

  return message;
}

/**
 * Build archival notification message
 * @private
 */
_buildArchivalNotificationMessage(ad, stats) {
  return `
‚ö†Ô∏è <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤</b>

üì¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${ad.title}
üìÖ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> ${new Date(ad.created_at).toLocaleDateString('ru-RU')}
üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> ${stats.view_count || 0}
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b> ${stats.comments_count || 0}
üîñ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:</b> ${stats.bookings_count || 0}

–°—Ä–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ.
  `.trim();
}

/**
 * Get user by ID (helper method)
 * @private
 */
async _getUserById(userId) {
  // This should use UserRepository from DI
  // For now, using prisma directly
  const { prisma } = require('../../infrastructure/database/prisma');
  return await prisma.user.findUnique({
    where: { id: userId },
  });
}

