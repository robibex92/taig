import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function runMigration() {
  try {
    console.log("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ —á–∞—Å—Ç—è–º
    console.log("üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...");

    // 1. –î–æ–±–∞–≤–ª—è–µ–º image_url –≤ events
    console.log("1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ image_url –≤ events...");
    await prisma.$executeRaw`ALTER TABLE "events" ADD COLUMN IF NOT EXISTS "image_url" TEXT;`;
    console.log("‚úÖ image_url –¥–æ–±–∞–≤–ª–µ–Ω");

    // 2. –ò–∑–º–µ–Ω—è–µ–º event_registrations –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Å—Ç–µ–π
    console.log("2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ event_registrations...");
    await prisma.$executeRaw`ALTER TABLE "event_registrations" ALTER COLUMN "user_id" DROP NOT NULL;`;
    await prisma.$executeRaw`ALTER TABLE "event_registrations" ADD COLUMN IF NOT EXISTS "guest_name" VARCHAR(255);`;
    await prisma.$executeRaw`ALTER TABLE "event_registrations" ADD COLUMN IF NOT EXISTS "guest_phone" VARCHAR(50);`;
    await prisma.$executeRaw`ALTER TABLE "event_registrations" ADD COLUMN IF NOT EXISTS "guest_email" VARCHAR(255);`;
    console.log("‚úÖ event_registrations –æ–±–Ω–æ–≤–ª–µ–Ω–∞");

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É event_waitlist
    console.log("3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã event_waitlist...");
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "event_waitlist" (
        "id" BIGSERIAL NOT NULL,
        "event_id" BIGINT NOT NULL,
        "user_id" BIGINT,
        "guest_name" VARCHAR(255),
        "guest_phone" VARCHAR(50),
        "guest_email" VARCHAR(255),
        "notes" TEXT,
        "notified" BOOLEAN NOT NULL DEFAULT false,
        "created_at" TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "event_waitlist_pkey" PRIMARY KEY ("id")
      );
    `;
    console.log("‚úÖ event_waitlist —Å–æ–∑–¥–∞–Ω–∞");

    // 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É event_telegram_chats
    console.log("4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã event_telegram_chats...");
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "event_telegram_chats" (
        "id" BIGSERIAL NOT NULL,
        "event_id" BIGINT NOT NULL,
        "telegram_chat_id" INTEGER NOT NULL,
        "message_sent" BOOLEAN NOT NULL DEFAULT false,
        "telegram_message_id" BIGINT,
        "created_at" TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "event_telegram_chats_pkey" PRIMARY KEY ("id")
      );
    `;
    console.log("‚úÖ event_telegram_chats —Å–æ–∑–¥–∞–Ω–∞");

    // 5. –î–æ–±–∞–≤–ª—è–µ–º Foreign Keys
    console.log("5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Foreign Keys...");
    await prisma.$executeRaw`ALTER TABLE "event_waitlist" ADD CONSTRAINT "event_waitlist_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "events"("id") ON DELETE CASCADE ON UPDATE CASCADE;`;
    await prisma.$executeRaw`ALTER TABLE "event_waitlist" ADD CONSTRAINT "event_waitlist_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("user_id") ON DELETE CASCADE ON UPDATE CASCADE;`;
    await prisma.$executeRaw`ALTER TABLE "event_telegram_chats" ADD CONSTRAINT "event_telegram_chats_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "events"("id") ON DELETE CASCADE ON UPDATE CASCADE;`;
    await prisma.$executeRaw`ALTER TABLE "event_telegram_chats" ADD CONSTRAINT "event_telegram_chats_telegram_chat_id_fkey" FOREIGN KEY ("telegram_chat_id") REFERENCES "telegram_chats"("id") ON DELETE CASCADE ON UPDATE CASCADE;`;
    console.log("‚úÖ Foreign Keys –¥–æ–±–∞–≤–ª–µ–Ω—ã");

    // 6. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log("6. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...");
    await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS "event_waitlist_event_id_idx" ON "event_waitlist"("event_id");`;
    await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS "event_waitlist_user_id_idx" ON "event_waitlist"("user_id");`;
    await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS "event_waitlist_notified_idx" ON "event_waitlist"("notified");`;
    await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS "event_telegram_chats_event_id_idx" ON "event_telegram_chats"("event_id");`;
    await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS "event_telegram_chats_telegram_chat_id_idx" ON "event_telegram_chats"("telegram_chat_id");`;
    await prisma.$executeRaw`CREATE UNIQUE INDEX IF NOT EXISTS "event_telegram_chats_event_id_telegram_chat_id_key" ON "event_telegram_chats"("event_id", "telegram_chat_id");`;
    console.log("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã");

    // 7. –û–±–Ω–æ–≤–ª—è–µ–º purpose –≤ telegram_chats
    console.log("7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ purpose –≤ telegram_chats...");
    await prisma.$executeRaw`ALTER TABLE "telegram_chats" ALTER COLUMN "purpose" TYPE VARCHAR(50);`;
    console.log("‚úÖ purpose –æ–±–Ω–æ–≤–ª–µ–Ω");

    console.log("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error.message);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

runMigration().catch(console.error);
