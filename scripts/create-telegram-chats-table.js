import { prisma } from "../src/infrastructure/database/db.js";

async function createTelegramChatsTable() {
  try {
    console.log("Creating telegram_chats table...");

    // Create telegram_chats table
    await prisma.$executeRawUnsafe(`
      CREATE TABLE IF NOT EXISTS telegram_chats (
          id SERIAL PRIMARY KEY,
          chat_id VARCHAR(255) NOT NULL,
          thread_id VARCHAR(255),
          name VARCHAR(255) NOT NULL,
          description TEXT,
          chat_type VARCHAR(50) NOT NULL DEFAULT 'group',
          is_active BOOLEAN NOT NULL DEFAULT true,
          purpose VARCHAR(50) NOT NULL DEFAULT 'general',
          created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          UNIQUE(chat_id, thread_id)
      );
    `);

    console.log("‚úÖ Table telegram_chats created");

    // Create indexes
    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_telegram_chats_purpose ON telegram_chats(purpose);
    `);
    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_telegram_chats_is_active ON telegram_chats(is_active);
    `);
    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_telegram_chats_chat_id ON telegram_chats(chat_id);
    `);

    console.log("‚úÖ Indexes created");

    // Insert existing chats
    await prisma.$executeRawUnsafe(`
      INSERT INTO telegram_chats (chat_id, thread_id, name, description, chat_type, is_active, purpose) VALUES
      -- Ads chats
      ('-1001922890501', '1588', '–ö—É–ø–∏ –ø—Ä–æ–¥–∞–π —Ç–∞–π–≥–∏–Ω—Å–∫–∏–π –ø–∞—Ä–∫.', '–ß–∞—Ç –∫—É–ø–∏/–ø—Ä–æ–¥–∞–π (–¥–≤—É—Ö –¥–æ–º–æ–≤ –ñ–ö)', 'group', true, 'ads'),
      ('-1001935812136', '5541', '–ö—É–ø–∏/–ø—Ä–æ–¥–∞–π, –æ—Ç–¥–∞–º –¥–∞—Ä–æ–º', '–ß–∞—Ç –∫—É–ø–∏/–ø—Ä–æ–¥–∞–π (39 –¥–æ–º)', 'group', true, 'ads'),

      -- News chats
      ('-1001922890501', NULL, '–ë–æ–ª—Ç–∞–ª–∫–∞ –¥–≤—É—Ö –¥–æ–º–æ–≤', '–ß–∞—Ç –±–æ–ª—Ç–∞–ª–∫–∏ (–¥–≤—É—Ö –¥–æ–º–æ–≤ –ñ–ö)', 'group', true, 'news'),
      ('-1001935812136', '5543', '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–æ–º–∞ 39', '–ß–∞—Ç –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (39 –¥–æ–º)', 'group', true, 'news'),
      ('-1001992407628', NULL, '–ß–∞—Ç 2 —Å–µ–∫—Ü–∏–∏', '–ß–∞—Ç 2 —Å–µ–∫—Ü–∏–∏ (39 –¥–æ–º)', 'group', true, 'news'),
      ('-4611904517', NULL, '–ß–∞—Ç 4 —Å–µ–∫—Ü–∏–∏', '–ß–∞—Ç 4 —Å–µ–∫—Ü–∏–∏ (39 –¥–æ–º)', 'group', true, 'news'),
      ('-1002030238237', NULL, '–ß–∞—Ç 7 —Å–µ–∫—Ü–∏–∏', '–ß–∞—Ç 7 —Å–µ–∫—Ü–∏–∏ (39 –¥–æ–º)', 'group', true, 'news'),

      -- General/Test chats
      ('-1002609427061', NULL, 'general —á–∞—Ç', 'general —á–∞—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø–µ', 'group', true, 'general'),
      ('-1002609427061', '2', '–ö—É–ø–∏/–ø—Ä–æ–¥–∞–π —Ç–µ—Å—Ç–æ–≤—ã–π', '–ö—É–ø–∏/–ø—Ä–æ–¥–∞–π, –æ—Ç–¥–∞–º –¥–∞—Ä–æ–º —á–∞—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø–µ', 'group', true, 'general'),
      ('-1002609427061', '3', '–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π', '–ù–æ–≤–æ—Å—Ç–∏ —á–∞—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø–µ', 'group', true, 'general')
      ON CONFLICT (chat_id, thread_id) DO NOTHING;
    `);

    console.log("‚úÖ Initial data inserted");

    // Create trigger
    await prisma.$executeRawUnsafe(`
      CREATE OR REPLACE FUNCTION update_telegram_chats_updated_at()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = CURRENT_TIMESTAMP;
          RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;
    `);

    await prisma.$executeRawUnsafe(`
      DROP TRIGGER IF EXISTS telegram_chats_updated_at ON telegram_chats;
    `);

    await prisma.$executeRawUnsafe(`
      CREATE TRIGGER telegram_chats_updated_at
      BEFORE UPDATE ON telegram_chats
      FOR EACH ROW
      EXECUTE FUNCTION update_telegram_chats_updated_at();
    `);

    console.log("‚úÖ Trigger created");

    // Verify data
    const count = await prisma.$queryRawUnsafe(
      `SELECT COUNT(*) as count FROM telegram_chats;`
    );
    console.log(`‚úÖ Total chats in DB: ${count[0].count}`);

    console.log("\nüéâ Migration completed successfully!");
  } catch (error) {
    console.error("‚ùå Migration failed:", error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

createTelegramChatsTable();
