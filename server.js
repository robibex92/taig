import express from 'express';
import cors from 'cors';
import telegramRoutes from './routes/telegram.js';
import postsRoutes from './routes/posts.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç–æ–≤
import dotenv from 'dotenv';
import bot from './bot.js';
import pg from 'pg';       // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è ESM




const { Pool } = pg;
// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î


dotenv.config();

const app = express();

// –û—Å–Ω–æ–≤–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.use(cors({
  origin: function (origin, callback) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (curl, Postman)
    if (!origin) return callback(null, true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ origin –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
    if (allowedOrigins.some(allowed => {
      return origin === allowed || 
             origin.replace(/\/$/, '') === allowed.replace(/\/$/, '');
    })) {
      return callback(null, true);
    }
    
    // –î–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    callback(new Error(`Origin ${origin} not allowed by CORS`));
  },
  credentials: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∫—É–∫/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'], // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  exposedHeaders: ['Content-Length', 'X-Powered-By'],
  maxAge: 86400 // –ö—ç—à–∏—Ä—É–µ–º preflight –Ω–∞ 24 —á–∞—Å–∞
}));

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è OPTIONS-–∑–∞–ø—Ä–æ—Å–æ–≤
app.options('*', cors({
  origin: allowedOrigins,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']
}));


app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const origin = req.headers.origin;
  if (origin && allowedOrigins.includes(origin)) {
    res.header('Access-Control-Allow-Origin', origin);
    res.header('Access-Control-Allow-Credentials', 'true');
    res.header('Vary', 'Origin'); // –í–∞–∂–Ω–æ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è CORS
  }
  next();
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  console.log('Headers:', req.headers);
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,  // –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ë–î
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
  connectionTimeoutMillis: 5000,
  idleTimeoutMillis: 30000
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
pool.connect((err, client, release) => {
  if (err) {
    console.error('Error connecting to the database:', err);
    return;
  }
  console.log('Successfully connected to the database');
  release();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
pool.on('error', (err) => {
  console.error('Unexpected database error:', err);
  process.exit(-1);
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
app.use('/api', (req, res, next) => {
  console.log(`API Request: ${req.method} ${req.path}`);
  next();
});

app.use('/api/telegram', telegramRoutes); // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Telegram
app.use('/api/posts', postsRoutes); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ—Å—Ç–æ–≤

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({ 
      status: 'OK',
      db: 'connected',
      timestamp: new Date().toISOString(),
      version: process.env.npm_package_version || '1.0.0'
    });
  } catch (err) {
    console.error('Health check failed:', err);
    res.status(500).json({
      status: 'ERROR',
      db: 'disconnected',
      error: err.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
app.get('/', (req, res) => {
  res.json({
    status: 'API is running',
    endpoints: {
      posts: '/api/posts',
      telegram: '/api/telegram'
    }
  });
});

const PORT = process.env.PORT || 5000;

//–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch()
  .then(() => {
    console.log('ü§ñ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
  });

// –í–∫–ª—é—á–∞–µ–º graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

//app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
app.listen(PORT, '0.0.0.0', () => { // ‚Üê –î–æ–±–∞–≤—å—Ç–µ '0.0.0.0'
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/test', (req, res) => {
  res.json({ message: "Hello from backend!" });
});

app.get('/api/test-db', async (req, res) => {
  try {
    console.log('–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î...');
    const result = await pool.query('SELECT current_database() as db');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:', result.rows);
    res.json({ status: 'OK', db: result.rows[0].db });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ë–î:', err.stack); // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏
    res.status(500).json({ 
      error: 'DB error',
      message: err.message,
      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
  }
});

app.get('/api/taigsql-data', async (req, res) => {
  try {
    // –ü—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É)
    const result = await pool.query('SELECT * FROM public.users LIMIT 10');
    res.json({
      status: 'success',
      data: result.rows,
      count: result.rowCount
    });
  } catch (err) {
    console.error('Taigsql query error:', err);
    res.status(500).json({ error: 'Query failed', details: err.message });
  }
});