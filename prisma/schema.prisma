generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id             BigInt              @id @default(autoincrement())
  username            String?
  first_name          String?
  last_name           String?
  joined_at           DateTime?           @default(now()) @db.Timestamp(6)
  avatar              String?
  Invited             Int?
  role                Boolean?
  is_manually_updated String?
  telegram_first_name String?
  telegram_last_name  String?
  status              String?
  refresh_token       String?             @db.VarChar(500)
  bookings            Booking[]
  event_registrations EventRegistration[] @relation("EventRegistrations")
  event_waitlist      EventWaitlist[]     @relation("EventWaitlist")
  events_created      Event[]             @relation("EventCreator")

  @@map("users")
}

model Ad {
  id          BigInt    @id @default(autoincrement())
  user_id     BigInt?
  title       String?
  content     String?
  status      String?
  created_at  DateTime? @db.Timestamptz(6)
  subcategory Int?
  updated_at  DateTime? @updatedAt @db.Timestamptz(6)
  category    Int?
  price       String?
  view_count  Int?
  bookings    Booking[]

  @@map("ads")
}

model AdImage {
  id         Int       @id @default(autoincrement())
  ad_id      Int?
  image_url  String?
  is_main    Boolean?
  created_at DateTime? @db.Timestamptz(6)
  post_id    Int?

  @@map("ad_images")
}

model Post {
  id         BigInt    @id @default(autoincrement())
  title      String?
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @updatedAt @db.Timestamptz(6)
  content    String?
  image_url  String?
  status     String?
  source     String?
  marker     String?

  @@map("posts")
}

model TelegramMessage {
  id             BigInt    @id @default(autoincrement())
  post_id        BigInt?
  ad_id          BigInt?
  chat_id        String?
  message_id     String?
  created_at     DateTime? @db.Timestamptz(6)
  thread_id      String?
  message_type   String?
  context_id     BigInt?
  context_type   String?
  message_text   String?
  recipient_id   String?
  sender_id      String?
  media_group_id BigInt?
  caption        String?
  is_media       Boolean?  @default(false)
  price          String?
  url_img        String[]

  @@map("telegram_messages")
}

model House {
  id           BigInt    @id @default(autoincrement())
  house        String?
  entrance     Int?
  number       Int?
  floor        Int?
  facade_color String?
  info         String?
  position     Int?
  status       Boolean?
  created_at   DateTime? @db.Timestamptz(6)
  id_telegram  Int?

  @@map("houses")
}

model HouseComment {
  id         BigInt   @id @default(autoincrement())
  house_id   BigInt
  author_id  BigInt
  comment    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([house_id])
  @@index([author_id])
  @@index([created_at])
  @@map("house_comments")
}

model EntranceComment {
  id         BigInt   @id @default(autoincrement())
  house_id   BigInt
  entrance   Int
  author_id  BigInt
  comment    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([house_id, entrance], name: "house_id_entrance")
  @@index([author_id])
  @@index([created_at])
  @@map("entrance_comments")
}

model FloorRule {
  id       BigInt  @id
  house    String?
  entrance Int?
  floor    Int?
  position Int?

  @@map("floor_rules")
}

model Car {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt?
  car_number String?
  car_model  String?
  created_at DateTime? @db.Timestamptz(6)
  status     Boolean?
  info       Json?
  car_brand  String?
  car_color  String?

  @@map("cars")
}

model Faq {
  id         BigInt    @id
  question   String?
  answer     String?
  status     String?
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)

  @@map("faq")
}

model Category {
  id    BigInt  @id
  name  String?
  image String?

  @@map("categories")
}

model Subcategory {
  id          BigInt  @id
  category_id BigInt?
  name        String?

  @@map("subcategories")
}

model RefreshToken {
  id                 BigInt    @id @default(autoincrement())
  user_id            BigInt
  token              String    @unique
  jti                String    @unique @db.VarChar(255)
  device_fingerprint String?   @db.VarChar(255)
  ip_address         String?   @db.VarChar(100)
  user_agent         String?
  device_info        Json?
  expires_at         DateTime  @db.Timestamptz(6)
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  last_used_at       DateTime? @db.Timestamptz(6)
  is_revoked         Boolean   @default(false)
  revoked_at         DateTime? @db.Timestamptz(6)

  @@index([expires_at], map: "idx_refresh_tokens_expires_at")
  @@index([is_revoked], map: "idx_refresh_tokens_is_revoked")
  @@index([jti], map: "idx_refresh_tokens_jti")
  @@index([user_id], map: "idx_refresh_tokens_user_id")
  @@map("refresh_tokens")
}

model Booking {
  id            BigInt    @id @default(autoincrement())
  ad_id         BigInt
  user_id       BigInt
  booking_order Int
  status        String    @default("active") @db.VarChar(50)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  cancelled_at  DateTime? @db.Timestamptz(6)
  ad            Ad        @relation(fields: [ad_id], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([ad_id, user_id, status])
  @@index([ad_id, status])
  @@index([user_id, status])
  @@index([created_at(sort: Desc)])
  @@map("bookings")
}

model TelegramChat {
  id             BigInt   @id @default(autoincrement())
  chat_id        String   @db.VarChar(255)
  thread_id      String?  @db.VarChar(255)
  name           String   @db.VarChar(255)
  description    String?
  chat_type      String   @default("group") @db.VarChar(50)
  is_active      Boolean  @default(true)
  purpose        String   @default("general") @db.VarChar(50)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  visible_to_all Boolean  @default(true)

  @@unique([chat_id, thread_id])
  @@index([chat_id], map: "idx_telegram_chats_chat_id")
  @@index([is_active], map: "idx_telegram_chats_is_active")
  @@index([purpose], map: "idx_telegram_chats_purpose")
  @@index([visible_to_all], map: "idx_telegram_chats_visible_to_all")
  @@map("telegram_chats")
}

model CarImage {
  id               BigInt    @id @default(autoincrement())
  car_id           BigInt
  image_url        String
  comment          String?
  added_by_user_id BigInt?
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @updatedAt @db.Timestamptz(6)

  @@index([car_id], map: "idx_car_images_car_id")
  @@index([created_at(sort: Desc)], map: "idx_car_images_created_at")
  @@map("car_images")
}

model CarAdminNote {
  id                  BigInt    @id @default(autoincrement())
  car_id              BigInt
  note                String
  created_by_admin_id BigInt
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @updatedAt @db.Timestamptz(6)

  @@index([car_id], map: "idx_car_admin_notes_car_id")
  @@index([created_at(sort: Desc)], map: "idx_car_admin_notes_created_at")
  @@map("car_admin_notes")
}

model ParkingSpot {
  id           BigInt   @id @default(autoincrement())
  spot_number  String   @unique @db.VarChar(10)
  floor        Int      @default(1)
  section      String?  @db.VarChar(50)
  status       String   @default("undefined") @db.VarChar(50)
  price        String?  @db.VarChar(100)
  description  String?
  contact_info String?
  is_active    Boolean  @default(true)
  owner_id     BigInt?
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([is_active], map: "idx_parking_spots_is_active")
  @@index([owner_id], map: "idx_parking_spots_owner_id")
  @@index([spot_number], map: "idx_parking_spots_spot_number")
  @@index([status], map: "idx_parking_spots_status")
  @@map("parking_spots")
}

model ParkingSpotHistory {
  id               BigInt   @id @default(autoincrement())
  parking_spot_id  BigInt
  changed_by_id    BigInt?
  old_status       String?  @db.VarChar(50)
  new_status       String   @db.VarChar(50)
  old_price        String?  @db.VarChar(100)
  new_price        String?  @db.VarChar(100)
  old_description  String?
  new_description  String?
  old_contact_info String?
  new_contact_info String?
  change_reason    String?
  created_at       DateTime @default(now()) @db.Timestamptz(6)

  @@index([parking_spot_id], map: "idx_parking_spot_history_parking_spot_id")
  @@map("parking_spot_history")
}

model Event {
  id               BigInt              @id @default(autoincrement())
  title            String              @db.VarChar(255)
  description      String?
  event_type       String              @default("general") @db.VarChar(50)
  location         String?             @db.VarChar(255)
  start_date       DateTime            @db.Timestamptz(6)
  end_date         DateTime?           @db.Timestamptz(6)
  max_participants Int?
  status           String              @default("active") @db.VarChar(50)
  created_by       BigInt
  created_at       DateTime            @default(now()) @db.Timestamptz(6)
  updated_at       DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  image_url        String?
  registrations    EventRegistration[]
  telegram_chats   EventTelegramChat[]
  waitlist         EventWaitlist[]
  creator          User                @relation("EventCreator", fields: [created_by], references: [user_id], onDelete: Cascade)

  @@index([status])
  @@index([event_type])
  @@index([start_date])
  @@index([created_by])
  @@map("events")
}

model EventRegistration {
  id            BigInt   @id @default(autoincrement())
  event_id      BigInt
  user_id       BigInt?
  status        String   @default("registered") @db.VarChar(50)
  notes         String?
  registered_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  guest_name    String?  @db.VarChar(255)
  guest_phone   String?  @db.VarChar(50)
  guest_email   String?  @db.VarChar(255)
  event         Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user          User?    @relation("EventRegistrations", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([event_id, user_id])
  @@index([event_id])
  @@index([user_id])
  @@index([status])
  @@map("event_registrations")
}

model EventWaitlist {
  id          BigInt   @id @default(autoincrement())
  event_id    BigInt
  user_id     BigInt?
  guest_name  String?  @db.VarChar(255)
  guest_phone String?  @db.VarChar(50)
  guest_email String?  @db.VarChar(255)
  notes       String?
  notified    Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  event       Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user        User?    @relation("EventWaitlist", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([event_id])
  @@index([user_id])
  @@index([notified])
  @@map("event_waitlist")
}

model EventTelegramChat {
  id                  BigInt   @id @default(autoincrement())
  event_id            BigInt
  telegram_chat_id    Int
  message_sent        Boolean  @default(false)
  telegram_message_id BigInt?
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  event               Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@unique([event_id, telegram_chat_id])
  @@index([event_id])
  @@index([telegram_chat_id])
  @@map("event_telegram_chats")
}

model ParkingMessage {
  id              BigInt   @id @default(autoincrement())
  parking_spot_id BigInt
  sender_id       BigInt
  receiver_id     BigInt
  content         String
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now()) @db.Timestamptz(6)

  @@index([parking_spot_id], map: "idx_parking_messages_parking_spot_id")
  @@map("parking_messages")
}
